!function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="lib/",i(i.s=0)}([function(t,e,i){ezui={},i(1),i(2),i(3),i(4),i(5),i(6),i(7),ezui.init=function(t){ezui.uitls.isTop()&&(ezui.options.init(t),t.dictUrl&&ezui.dict.updateDict(t.dictUrl))}},function(t,e){ezui.uitls={isTop:function(){return top==self},timestampUrl:function(t){return t=-1!=t.indexOf("?")?t+"&t="+(new Date).getTime():t+"?t="+(new Date).getTime()},propertyArray:function(t,e){var i=new Array;for(item in t){var n=t[item][e];null!=n&&i.push(n)}return i}}},function(t,e){ezui.tips={successTip:function(t){window.top.$.messager.show({title:"提示",msg:t,timeout:2e3,showType:"fade"})},failedTip:function(t){window.top.$.messager.alert("出错了",t)}}},function(t,e){ezui.options={_options:null,init:function(t){let e=top==self;this._options=e?t||{}:window.top.ezui.options._options},set:function(t,e){this._options[t]=e},get:function(t){return this._options[t]||(this._options[t]={}),this._options[t]}}},function(t,e){ezui.data={_data:null,init:function(){let t=top==self;this._data=t?{}:window.top.ezui._data},set:function(t,e){this._data[t]=e},get:function(t){return this._data[t]||(this._data[t]={}),this._data[t]}},ezui.data.init()},function(t,e){$._originAjax=$.ajax,$.ajax=function(t){t.type||(t.type="POST"),t.dataType||(t.dataType="json");var e=!1;if("[object FormData]"==Object.prototype.toString.call(t.data)&&(e=!0),e&&"html"==t.dataType&&!t.success&&!t.error&&t.complete&&(t.success=t.complete,t.dataType="json",t.complete=void 0),e){var i=t.data.get("_maskId");i&&(t.maskId=i);var n=t.data.get("_maskMsg");n&&(t.maskMsg=n)}else t.data&&t.data._maskId&&(t.maskId=t.data._maskId),t.data&&t.data._maskMsg&&(t.maskMsg=t.data._maskMsg);var o=t.beforeSend;t.beforeSend=function(e){t.maskId&&$(t.maskId).LoadingOverlay("show",{text:t.maskMsg?t.maskMsg:"Loading...."}),o&&o(e)};var a=t.complete;t.complete=function(e,i){t.maskId&&$(t.maskId).LoadingOverlay("hide"),a&&a(e,i)};var s=t.error;t.error=function(e,i,n){switch(e.status){case 200:return void alert("必须返回Json对象，不能为空或者其它类型");case 500:e.responseJSON&&e.responseJSON.msg?$.messager.alert("出错了",e.responseJSON.msg,"warning"):$.messager.alert("未知的错误",e.responseText,"error");break;case 401:window.ezui.options._options.on401?window.ezui.options._options.on401(t):alert("无法识别当前用户，请重新登录");break;case 403:alert("无权限执行此操作"+e.status);break;case 404:alert("找不到服务"+e.status);break;case 408:alert("请求超时"+e.status);break;default:alert("未知错误"+e.status)}s&&s(e,i,n)};var r=t.success;t.success=function(t,e,i){t.tip&&$.messager.show({title:t.title,msg:t.msg,timeout:t.timeout,showType:t.showType}),r&&r(t,e,i)},console.log(t.dataType),$._originAjax(t)}},function(t,e){ezui.window={open:function(t,e,i){var n=$.extend({width:1024,height:600,title:"New Window",url:"",maximizable:!1,minimizable:!1,resizable:!0,modal:!0,onClosed:function(){}},t||{}),o="_iframe_"+(new Date).getTime();window.top.$("body",window.top.document).append(`<div style="overflow: hidden" id="_div_${o}"></div>`);var a=window.top.$("#_div_"+o,window.top.document);var s=`<iframe scrolling="auto" name="${o}" src="${ezui.uitls.timestampUrl(n.url)}" frameborder="0" style="width:100%;height:100%;" ></iframe><div style="clear:both;"/>`;a.append(s),a.window({title:n.title,width:n.width,height:n.height,modal:n.modal,collapsible:!1,minimizable:n.minimizable,maximizable:n.maximizable,resizable:n.resizable,closable:n.closable,onClose:function(){n.onClosed(),a.window("destroy")}}),ezui.data.get("_wins")[o]={callback:i||function(){},container:a,params:e}},close:function(t,e){let i=window.name;data&&((0,ezui.data.get("_wins")[i].callback)(t),e&&window.top.$.messager.show({title:"",msg:e,timeout:2e3,showType:"fade"}));Global.get("_wins")[i].container.window("close")},getParams:function(){let t=window.name;return ezui.data.get("_wins")[t].params},setTitle:function(t){let e=window.name;Global.get("_wins")[e].container.window("setTitle",t)}}},function(t,e){ezui.dict={updateDict:function(t){t||(t=ezui.options._options.dictUrl),t&&$.post(t,(function(t){ezui.data.set("_dict",t)}))},getDict:function(t){return ezui.data.get("_dict")[t]},getDictValue:function(t,e){let i=ezui.data.get("_dict"),n=null;if(i[t]){let o=i[t];for(index in o)if(dictItem=o[index],dictItem.value==e){n=dictItem.text;break}}return null==n?"-":n}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,